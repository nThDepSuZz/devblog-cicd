name: DevBlog CI/CD Pipeline

# ¿Cuándo se ejecuta este pipeline?
on:
  push:
    branches: [ main, develop ]  # En push a main o develop
  pull_request:
    branches: [ main ]           # En pull requests a main

# Variables de entorno globales
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

# Jobs (trabajos) que se ejecutarán
jobs:
  # ================================
  # JOB 1: TESTING
  # ================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=term-missing -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # ================================
  # JOB 2: DOCKER BUILD
  # ================================
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t devblog:${{ github.sha }} .
          docker build -t devblog:latest .

      - name: Test Docker image
        run: |
          docker run -d -p 5000:5000 --name test-container devblog:latest
          sleep 10
          curl -f http://localhost:5000/ || exit 1
          curl -f http://localhost:5000/api/posts || exit 1
          docker stop test-container
          docker rm test-container

      - name: Save Docker image
        run: |
          docker save devblog:latest | gzip > devblog-image.tar.gz

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-image
          path: devblog-image.tar.gz
          retention-days: 1

  # ================================
  # JOB 3: SECURITY SCAN
  # ================================
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run safety check
        run: |
          pip install safety
          safety check -r requirements.txt

      - name: Run bandit security linter
        run: |
          pip install bandit
          bandit -r app/ -f json -o bandit-report.json || true

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: bandit-report.json

  # ================================
  # JOB 4: DEPLOY (solo en main)
  # ================================
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, docker-build, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy notification
        run: |
          echo " All tests passed! Ready for deployment!"
          echo " Test results: Passed"
          echo " Docker build: Success"
          echo " Security scan: Passed"
          echo " Deployment would happen here..."
